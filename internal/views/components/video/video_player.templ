package components

import "github.com/zibbp/eos/internal/video"

templ VideoPlayer(cdnUrl string, video video.Video) {
	// set variables to access in javascript
	@templ.JSONScript("video_cdn", cdnUrl)
	@templ.JSONScript("video_path", video.VideoPath)
	@templ.JSONScript("thumbnail_path", video.ThumbnailPath)
	@templ.JSONScript("subtitle_path", video.SubtitlePath)
	@templ.JSONScript("ext_id", video.ExtID)
	<div>
		<script type="module">
    // get variables set by server
    const videoCDN = JSON.parse(document.getElementById('video_cdn').textContent)
    const videoPath = JSON.parse(document.getElementById('video_path').textContent)
    const thumbnailPath = JSON.parse(document.getElementById('thumbnail_path').textContent)
    const subtitlePath = JSON.parse(document.getElementById('subtitle_path').textContent)
    const extId = JSON.parse(document.getElementById('ext_id').textContent)
    // create player
    const player = await VidstackPlayer.create({
      target: '#player',
      src: [{ src: `${videoCDN}/${encodeURIComponent(videoPath)}`, type: 'video/webm' }],
      poster: `${videoCDN}/${encodeURIComponent(thumbnailPath)}`,
      layout: new VidstackPlayerLayout({
        // thumbnails: 'https://files.vidstack.io/sprite-fight/thumbnails.vtt',
      })
    });

    // create chapters track
    player.textTracks.add({
      type: 'json',
      src: `/videos/${extId}/chapters`,
      kind: 'chapters',
      default: true
    });
    console.debug(player.textTracks)

    // create subtitle tracks
    if (subtitlePath && subtitlePath.length > 0) {
    subtitlePath.forEach((subtitle) => {
      console.log(subtitle)
      const path = `${videoCDN}/${encodeURIComponent(subtitle)}`
      const parts = subtitle.split('.')
      const name = parts[parts.length - 2];
      const type = parts[parts.length - 1]
      const track = new TextTrack({
        src: path,
        kind: 'subtitles',
        label: name,
        language: name,
        type: type
      })

      player.textTracks.add(track)
    })
    }

    // set player volume from local storage
    const localStorageVolume = localStorage.getItem("eos-player-volume")
    console.debug(`local volume: ${localStorageVolume}`);
    if (localStorageVolume) {
      player.volume = parseFloat(localStorageVolume);
    }

    // watch player volume saving to local storage
    player.subscribe(({ volume }) => {
      localStorage.setItem("eos-player-volume", volume.toString())
    })

    // add class to player
    const mediaPlayer = document.querySelector('media-player');
    if (mediaPlayer) {
      mediaPlayer.classList.add('eos-video-player');
    }
  </script>
		<div id="player"></div>
	</div>
}
