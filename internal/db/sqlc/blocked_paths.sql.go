// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blocked_paths.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteBlockedPathById = `-- name: DeleteBlockedPathById :exec
DELETE FROM blocked_paths WHERE id = $1
`

func (q *Queries) DeleteBlockedPathById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlockedPathById, id)
	return err
}

const deleteBlockedPathByPath = `-- name: DeleteBlockedPathByPath :exec
DELETE FROM blocked_paths WHERE path = $1
`

func (q *Queries) DeleteBlockedPathByPath(ctx context.Context, path string) error {
	_, err := q.db.Exec(ctx, deleteBlockedPathByPath, path)
	return err
}

const getBlockedPath = `-- name: GetBlockedPath :one
SELECT id, path, error_count, is_blocked, created_at, updated_at FROM blocked_paths
WHERE path = $1
`

func (q *Queries) GetBlockedPath(ctx context.Context, path string) (BlockedPath, error) {
	row := q.db.QueryRow(ctx, getBlockedPath, path)
	var i BlockedPath
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.ErrorCount,
		&i.IsBlocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBlockedPaths = `-- name: GetBlockedPaths :many
SELECT id, path, error_count, is_blocked, created_at, updated_at FROM blocked_paths
`

func (q *Queries) GetBlockedPaths(ctx context.Context) ([]BlockedPath, error) {
	rows, err := q.db.Query(ctx, getBlockedPaths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlockedPath
	for rows.Next() {
		var i BlockedPath
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.ErrorCount,
			&i.IsBlocked,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementBlockedPathErrorCount = `-- name: IncrementBlockedPathErrorCount :exec
UPDATE blocked_paths
SET error_count = error_count + 1
WHERE path = $1
`

func (q *Queries) IncrementBlockedPathErrorCount(ctx context.Context, path string) error {
	_, err := q.db.Exec(ctx, incrementBlockedPathErrorCount, path)
	return err
}

const insertBlockedPath = `-- name: InsertBlockedPath :one
INSERT INTO blocked_paths (id, path) VALUES ($1, $2)
RETURNING id, path, error_count, is_blocked, created_at, updated_at
`

type InsertBlockedPathParams struct {
	ID   pgtype.UUID
	Path string
}

func (q *Queries) InsertBlockedPath(ctx context.Context, arg InsertBlockedPathParams) (BlockedPath, error) {
	row := q.db.QueryRow(ctx, insertBlockedPath, arg.ID, arg.Path)
	var i BlockedPath
	err := row.Scan(
		&i.ID,
		&i.Path,
		&i.ErrorCount,
		&i.IsBlocked,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setBlockedPathAsBlocked = `-- name: SetBlockedPathAsBlocked :exec
UPDATE blocked_paths
SET is_blocked = true
WHERE path = $1
`

func (q *Queries) SetBlockedPathAsBlocked(ctx context.Context, path string) error {
	_, err := q.db.Exec(ctx, setBlockedPathAsBlocked, path)
	return err
}
