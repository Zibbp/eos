// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: channel.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getChannelByExternalId = `-- name: GetChannelByExternalId :one
SELECT id, ext_id, name, description, image_path, generate_thumbnails, created_at, updated_at FROM channels
WHERE ext_id = $1 LIMIT 1
`

func (q *Queries) GetChannelByExternalId(ctx context.Context, extID string) (Channel, error) {
	row := q.db.QueryRow(ctx, getChannelByExternalId, extID)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ExtID,
		&i.Name,
		&i.Description,
		&i.ImagePath,
		&i.GenerateThumbnails,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelById = `-- name: GetChannelById :one
SELECT id, ext_id, name, description, image_path, generate_thumbnails, created_at, updated_at FROM channels
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChannelById(ctx context.Context, id pgtype.UUID) (Channel, error) {
	row := q.db.QueryRow(ctx, getChannelById, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ExtID,
		&i.Name,
		&i.Description,
		&i.ImagePath,
		&i.GenerateThumbnails,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelByName = `-- name: GetChannelByName :one
SELECT id, ext_id, name, description, image_path, generate_thumbnails, created_at, updated_at FROM channels
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetChannelByName(ctx context.Context, name string) (Channel, error) {
	row := q.db.QueryRow(ctx, getChannelByName, name)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ExtID,
		&i.Name,
		&i.Description,
		&i.ImagePath,
		&i.GenerateThumbnails,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelNames = `-- name: GetChannelNames :many
SELECT name FROM channels
ORDER BY name ASC
`

func (q *Queries) GetChannelNames(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getChannelNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChannels = `-- name: GetChannels :many
SELECT id, ext_id, name, description, image_path, generate_thumbnails, created_at, updated_at FROM channels
ORDER BY name ASC
`

func (q *Queries) GetChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.Query(ctx, getChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.ExtID,
			&i.Name,
			&i.Description,
			&i.ImagePath,
			&i.GenerateThumbnails,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalChannels = `-- name: GetTotalChannels :one
SELECT COUNT(*) AS total FROM channels
`

func (q *Queries) GetTotalChannels(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalChannels)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const insertChannel = `-- name: InsertChannel :one
INSERT INTO channels (id, ext_id, name, description, image_path, generate_thumbnails) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, ext_id, name, description, image_path, generate_thumbnails, created_at, updated_at
`

type InsertChannelParams struct {
	ID                 pgtype.UUID
	ExtID              string
	Name               string
	Description        *string
	ImagePath          *string
	GenerateThumbnails bool
}

func (q *Queries) InsertChannel(ctx context.Context, arg InsertChannelParams) (Channel, error) {
	row := q.db.QueryRow(ctx, insertChannel,
		arg.ID,
		arg.ExtID,
		arg.Name,
		arg.Description,
		arg.ImagePath,
		arg.GenerateThumbnails,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.ExtID,
		&i.Name,
		&i.Description,
		&i.ImagePath,
		&i.GenerateThumbnails,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
