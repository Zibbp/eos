// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForBatchInsertChapters implements pgx.CopyFromSource.
type iteratorForBatchInsertChapters struct {
	rows                 []BatchInsertChaptersParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchInsertChapters) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchInsertChapters) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Title,
		r.rows[0].StartTime,
		r.rows[0].EndTime,
		r.rows[0].VideoID,
	}, nil
}

func (r iteratorForBatchInsertChapters) Err() error {
	return nil
}

// https://docs.sqlc.dev/en/stable/howto/insert.html#using-copyfrom
func (q *Queries) BatchInsertChapters(ctx context.Context, arg []BatchInsertChaptersParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"chapters"}, []string{"id", "title", "start_time", "end_time", "video_id"}, &iteratorForBatchInsertChapters{rows: arg})
}

// iteratorForBatchInsertComments implements pgx.CopyFromSource.
type iteratorForBatchInsertComments struct {
	rows                 []BatchInsertCommentsParams
	skippedFirstNextCall bool
}

func (r *iteratorForBatchInsertComments) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForBatchInsertComments) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Text,
		r.rows[0].Timestamp,
		r.rows[0].LikeCount,
		r.rows[0].IsFavorited,
		r.rows[0].Author,
		r.rows[0].AuthorID,
		r.rows[0].AuthorThumbnail,
		r.rows[0].AuthorIsUploader,
		r.rows[0].Parent,
		r.rows[0].VideoID,
	}, nil
}

func (r iteratorForBatchInsertComments) Err() error {
	return nil
}

// -- name: InsertComment :one
// INSERT INTO comments (
//
//	id, text, timestamp, like_count, is_favorited, author, author_id, author_thumbnail, author_is_uploader, parent, video_id
//
// ) VALUES (
//
//	$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
//
// ) RETURNING *;
// https://docs.sqlc.dev/en/stable/howto/insert.html#using-copyfrom
func (q *Queries) BatchInsertComments(ctx context.Context, arg []BatchInsertCommentsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"comments"}, []string{"id", "text", "timestamp", "like_count", "is_favorited", "author", "author_id", "author_thumbnail", "author_is_uploader", "parent", "video_id"}, &iteratorForBatchInsertComments{rows: arg})
}
