// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchInsertCommentsParams struct {
	ID               string
	Text             string
	Timestamp        pgtype.Timestamptz
	LikeCount        *int32
	IsFavorited      *bool
	Author           string
	AuthorID         string
	AuthorThumbnail  *string
	AuthorIsUploader *bool
	Parent           *string
	VideoID          pgtype.UUID
}

const getAllCommentsByVideoId = `-- name: GetAllCommentsByVideoId :many
SELECT id, text, timestamp, like_count, is_favorited, author, author_id, author_thumbnail, author_is_uploader, parent, video_id FROM comments
WHERE video_id = $1
ORDER BY like_count DESC
`

func (q *Queries) GetAllCommentsByVideoId(ctx context.Context, videoID pgtype.UUID) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getAllCommentsByVideoId, videoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Timestamp,
			&i.LikeCount,
			&i.IsFavorited,
			&i.Author,
			&i.AuthorID,
			&i.AuthorThumbnail,
			&i.AuthorIsUploader,
			&i.Parent,
			&i.VideoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentById = `-- name: GetCommentById :one
SELECT id, text, timestamp, like_count, is_favorited, author, author_id, author_thumbnail, author_is_uploader, parent, video_id FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCommentById(ctx context.Context, id string) (Comment, error) {
	row := q.db.QueryRow(ctx, getCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Timestamp,
		&i.LikeCount,
		&i.IsFavorited,
		&i.Author,
		&i.AuthorID,
		&i.AuthorThumbnail,
		&i.AuthorIsUploader,
		&i.Parent,
		&i.VideoID,
	)
	return i, err
}

const getCommentCountByVideoId = `-- name: GetCommentCountByVideoId :one
SELECT count(id) FROM comments
WHERE video_id = $1
`

func (q *Queries) GetCommentCountByVideoId(ctx context.Context, videoID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getCommentCountByVideoId, videoID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getCommentRepliesByCommentId = `-- name: GetCommentRepliesByCommentId :many
SELECT id, text, timestamp, like_count, is_favorited, author, author_id, author_thumbnail, author_is_uploader, parent, video_id FROM comments
WHERE parent = $1
ORDER BY like_count DESC
`

func (q *Queries) GetCommentRepliesByCommentId(ctx context.Context, parent *string) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentRepliesByCommentId, parent)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Timestamp,
			&i.LikeCount,
			&i.IsFavorited,
			&i.Author,
			&i.AuthorID,
			&i.AuthorThumbnail,
			&i.AuthorIsUploader,
			&i.Parent,
			&i.VideoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentsFilter = `-- name: GetCommentsFilter :many
SELECT id, text, timestamp, like_count, is_favorited, author, author_id, author_thumbnail, author_is_uploader, parent, video_id FROM comments
WHERE video_id = $1
ORDER BY like_count DESC
LIMIT $2 OFFSET $3
`

type GetCommentsFilterParams struct {
	VideoID pgtype.UUID
	Limit   int32
	Offset  int32
}

func (q *Queries) GetCommentsFilter(ctx context.Context, arg GetCommentsFilterParams) ([]Comment, error) {
	rows, err := q.db.Query(ctx, getCommentsFilter, arg.VideoID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Timestamp,
			&i.LikeCount,
			&i.IsFavorited,
			&i.Author,
			&i.AuthorID,
			&i.AuthorThumbnail,
			&i.AuthorIsUploader,
			&i.Parent,
			&i.VideoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRootCommentsForVideoId = `-- name: GetRootCommentsForVideoId :many
WITH top_comments AS (
    SELECT id, text, timestamp, like_count, is_favorited, author, author_id, author_thumbnail, author_is_uploader, parent, video_id
    FROM comments
    WHERE comments.video_id = $1
    AND comments.parent IS NULL
    ORDER BY comments.like_count DESC NULLS LAST
    LIMIT $2 OFFSET $3
)
SELECT
    tc.id, tc.text, tc.timestamp, tc.like_count, tc.is_favorited, tc.author, tc.author_id, tc.author_thumbnail, tc.author_is_uploader, tc.parent, tc.video_id,
    COALESCE(r.reply_count, 0) AS reply_count
FROM top_comments tc
LEFT JOIN (
    SELECT parent, COUNT(*) AS reply_count
    FROM comments
    WHERE comments.parent IN (SELECT id FROM top_comments)
    GROUP BY comments.parent
) r ON tc.id = r.parent
ORDER BY tc.like_count DESC NULLS LAST
`

type GetRootCommentsForVideoIdParams struct {
	VideoID pgtype.UUID
	Limit   int32
	Offset  int32
}

type GetRootCommentsForVideoIdRow struct {
	ID               string
	Text             string
	Timestamp        pgtype.Timestamptz
	LikeCount        *int32
	IsFavorited      *bool
	Author           string
	AuthorID         string
	AuthorThumbnail  *string
	AuthorIsUploader *bool
	Parent           *string
	VideoID          pgtype.UUID
	ReplyCount       int64
}

func (q *Queries) GetRootCommentsForVideoId(ctx context.Context, arg GetRootCommentsForVideoIdParams) ([]GetRootCommentsForVideoIdRow, error) {
	rows, err := q.db.Query(ctx, getRootCommentsForVideoId, arg.VideoID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRootCommentsForVideoIdRow
	for rows.Next() {
		var i GetRootCommentsForVideoIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Timestamp,
			&i.LikeCount,
			&i.IsFavorited,
			&i.Author,
			&i.AuthorID,
			&i.AuthorThumbnail,
			&i.AuthorIsUploader,
			&i.Parent,
			&i.VideoID,
			&i.ReplyCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
