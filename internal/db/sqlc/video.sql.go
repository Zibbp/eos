// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: video.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getVideoByExternalID = `-- name: GetVideoByExternalID :one
SELECT id, ext_id, title, description, upload_date, uploader, duration, view_count, like_count, dislike_count, format, height, width, resolution, fps, video_codec, vbr, audio_codec, abr, comment_count, video_path, thumbnail_path, info_path, subtitle_path, path, storyboard_path, created_at, updated_at, channel_id FROM videos
WHERE ext_id = $1 LIMIT 1
`

func (q *Queries) GetVideoByExternalID(ctx context.Context, extID *string) (Video, error) {
	row := q.db.QueryRow(ctx, getVideoByExternalID, extID)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.ExtID,
		&i.Title,
		&i.Description,
		&i.UploadDate,
		&i.Uploader,
		&i.Duration,
		&i.ViewCount,
		&i.LikeCount,
		&i.DislikeCount,
		&i.Format,
		&i.Height,
		&i.Width,
		&i.Resolution,
		&i.Fps,
		&i.VideoCodec,
		&i.Vbr,
		&i.AudioCodec,
		&i.Abr,
		&i.CommentCount,
		&i.VideoPath,
		&i.ThumbnailPath,
		&i.InfoPath,
		&i.SubtitlePath,
		&i.Path,
		&i.StoryboardPath,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChannelID,
	)
	return i, err
}

const getVideoById = `-- name: GetVideoById :one
SELECT id, ext_id, title, description, upload_date, uploader, duration, view_count, like_count, dislike_count, format, height, width, resolution, fps, video_codec, vbr, audio_codec, abr, comment_count, video_path, thumbnail_path, info_path, subtitle_path, path, storyboard_path, created_at, updated_at, channel_id FROM videos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetVideoById(ctx context.Context, id pgtype.UUID) (Video, error) {
	row := q.db.QueryRow(ctx, getVideoById, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.ExtID,
		&i.Title,
		&i.Description,
		&i.UploadDate,
		&i.Uploader,
		&i.Duration,
		&i.ViewCount,
		&i.LikeCount,
		&i.DislikeCount,
		&i.Format,
		&i.Height,
		&i.Width,
		&i.Resolution,
		&i.Fps,
		&i.VideoCodec,
		&i.Vbr,
		&i.AudioCodec,
		&i.Abr,
		&i.CommentCount,
		&i.VideoPath,
		&i.ThumbnailPath,
		&i.InfoPath,
		&i.SubtitlePath,
		&i.Path,
		&i.StoryboardPath,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChannelID,
	)
	return i, err
}

const getVideoInfoPaths = `-- name: GetVideoInfoPaths :many
SELECT info_path FROM videos
`

func (q *Queries) GetVideoInfoPaths(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getVideoInfoPaths)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var info_path string
		if err := rows.Scan(&info_path); err != nil {
			return nil, err
		}
		items = append(items, info_path)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideosCount = `-- name: GetVideosCount :one
SELECT COUNT(id) FROM videos
WHERE channel_id = $1
`

func (q *Queries) GetVideosCount(ctx context.Context, channelID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getVideosCount, channelID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getVideosFilter = `-- name: GetVideosFilter :many
SELECT id, ext_id, title, description, upload_date, uploader, duration, view_count, like_count, dislike_count, format, height, width, resolution, fps, video_codec, vbr, audio_codec, abr, comment_count, video_path, thumbnail_path, info_path, subtitle_path, path, storyboard_path, created_at, updated_at, channel_id FROM videos
WHERE channel_id = $1
ORDER BY upload_date DESC
LIMIT $2 OFFSET $3
`

type GetVideosFilterParams struct {
	ChannelID pgtype.UUID
	Limit     int32
	Offset    int32
}

func (q *Queries) GetVideosFilter(ctx context.Context, arg GetVideosFilterParams) ([]Video, error) {
	rows, err := q.db.Query(ctx, getVideosFilter, arg.ChannelID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.ExtID,
			&i.Title,
			&i.Description,
			&i.UploadDate,
			&i.Uploader,
			&i.Duration,
			&i.ViewCount,
			&i.LikeCount,
			&i.DislikeCount,
			&i.Format,
			&i.Height,
			&i.Width,
			&i.Resolution,
			&i.Fps,
			&i.VideoCodec,
			&i.Vbr,
			&i.AudioCodec,
			&i.Abr,
			&i.CommentCount,
			&i.VideoPath,
			&i.ThumbnailPath,
			&i.InfoPath,
			&i.SubtitlePath,
			&i.Path,
			&i.StoryboardPath,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertVideo = `-- name: InsertVideo :one
INSERT INTO videos (
  id, ext_id, title, description, upload_date, uploader, duration, view_count,
  like_count, dislike_count, format, height, width, resolution, fps, video_codec,
  vbr, audio_codec, abr, comment_count, video_path, thumbnail_path, info_path,
  subtitle_path, path, storyboard_path, channel_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8,
  $9, $10, $11, $12, $13, $14, $15, $16,
  $17, $18, $19, $20, $21, $22, $23,
  $24, $25, $26, $27
) RETURNING id, ext_id, title, description, upload_date, uploader, duration, view_count, like_count, dislike_count, format, height, width, resolution, fps, video_codec, vbr, audio_codec, abr, comment_count, video_path, thumbnail_path, info_path, subtitle_path, path, storyboard_path, created_at, updated_at, channel_id
`

type InsertVideoParams struct {
	ID             pgtype.UUID
	ExtID          *string
	Title          string
	Description    *string
	UploadDate     pgtype.Timestamptz
	Uploader       *string
	Duration       int32
	ViewCount      int64
	LikeCount      *int64
	DislikeCount   *int64
	Format         *string
	Height         *int32
	Width          *int32
	Resolution     *string
	Fps            *float32
	VideoCodec     *string
	Vbr            *float32
	AudioCodec     *string
	Abr            *float32
	CommentCount   *int32
	VideoPath      string
	ThumbnailPath  string
	InfoPath       string
	SubtitlePath   []string
	Path           string
	StoryboardPath *string
	ChannelID      pgtype.UUID
}

func (q *Queries) InsertVideo(ctx context.Context, arg InsertVideoParams) (Video, error) {
	row := q.db.QueryRow(ctx, insertVideo,
		arg.ID,
		arg.ExtID,
		arg.Title,
		arg.Description,
		arg.UploadDate,
		arg.Uploader,
		arg.Duration,
		arg.ViewCount,
		arg.LikeCount,
		arg.DislikeCount,
		arg.Format,
		arg.Height,
		arg.Width,
		arg.Resolution,
		arg.Fps,
		arg.VideoCodec,
		arg.Vbr,
		arg.AudioCodec,
		arg.Abr,
		arg.CommentCount,
		arg.VideoPath,
		arg.ThumbnailPath,
		arg.InfoPath,
		arg.SubtitlePath,
		arg.Path,
		arg.StoryboardPath,
		arg.ChannelID,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.ExtID,
		&i.Title,
		&i.Description,
		&i.UploadDate,
		&i.Uploader,
		&i.Duration,
		&i.ViewCount,
		&i.LikeCount,
		&i.DislikeCount,
		&i.Format,
		&i.Height,
		&i.Width,
		&i.Resolution,
		&i.Fps,
		&i.VideoCodec,
		&i.Vbr,
		&i.AudioCodec,
		&i.Abr,
		&i.CommentCount,
		&i.VideoPath,
		&i.ThumbnailPath,
		&i.InfoPath,
		&i.SubtitlePath,
		&i.Path,
		&i.StoryboardPath,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ChannelID,
	)
	return i, err
}
